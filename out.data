<h1>Hello2, {{ name }}!</h1>
<p>Your favorite color is {{ color }}.</p>
<!-- Main Content -->
<main id="main-content" class="flex-grow p-6">
  <h1 class="text-2xl font-bold">Home</h1>
  <p class="mt-2">Welcome to the home page.</p>
</main>

<!-- Tabs -->
<div
  id="tabs-bar"
  class="hidden border-t border-gray-300 bg-white px-4 py-2 flex space-x-2"
>
  <!-- Tabs go here -->
</div>

<footer
  class="flex justify-between items-center px-4 py-2 border-t bg-white text-sm relative h-12"
>
  <!-- Footer info, always shown (but truncated if needed) -->
  <div id="footer-info" class="truncate text-xs ml-2 flex-1">
    Currently viewing: Home
  </div>

  <!-- Language and help -->
  <div class="flex items-center space-x-2">
    <span id="language">[en]</span>

    <button id="help-button" class="text-lg" onclick="toggleModal()">?</button>
    <!-- Hamburger (mobile only) -->
    <button id="hamburger" class="text-2xl" onclick="toggleActionMenu()">
      &#9776;
    </button>
  </div>
</footer>

<!-- Floating Action Menu (Desktop only) -->
<div
  id="action-menu"
  class="hidden absolute right-0 bottom-12 border rounded-tl shadow-lg p-4 space-y-2 z-10 bg-gray-400 p-1.5 box-border"
>
  <div class="relative border-2 border-black p-5 bg-gray-400 box-border">
    <div
      class="absolute top-0 left-4 -translate-y-1/2 bg-gray-400 px-2 font-bold text-sm"
    >
      Menu
    </div>
    <div onclick="openTab('Dictionary')" class="my-1.5">Dictionary</div>
    <div onclick="openTab('Document')" class="my-1.5">Document</div>
    <div onclick="openTab('Conversation')" class="my-1.5">Conversation</div>
    <div onclick="openTab('Video')" class="my-1.5">Video</div>
  </div>
</div>

<!-- Mobile Menu -->
<div
  id="mobile-menu"
  class="fixed inset-0 bg-white z-50 hidden flex flex-col p-6"
>
  <div class="flex items-center justify-between mb-4">
    <button onclick="toggleActionMenu()" class="text-2xl font-bold">
      &lt;
    </button>
    <span class="text-lg font-semibold">Menu</span>
  </div>
  <button
    onclick="openTab('Dictionary'); toggleActionMenu()"
    class="mb-2 text-left"
  >
    Open Dictionary
  </button>
  <button
    onclick="openTab('Document'); toggleActionMenu()"
    class="mb-2 text-left"
  >
    Open Document
  </button>
  <button
    onclick="openTab('Conversation'); toggleActionMenu()"
    class="mb-2 text-left"
  >
    Open Conversation
  </button>
  <button onclick="openTab('Video'); toggleActionMenu()" class="mb-2 text-left">
    Open Video
  </button>
</div>

<!-- Shortcut Modal -->
<div
  id="shortcut-modal"
  class="fixed inset-0 flex items-center justify-center hidden z-50"
>
  <div class="bg-white p-6 rounded shadow-lg w-96">
    <h2 class="text-lg font-semibold mb-4">Keyboard Shortcuts</h2>
    <table class="w-full text-sm border">
      <tr class="border-b">
        <td class="py-1 px-2 font-mono">?</td>
        <td class="py-1 px-2">Show shortcuts</td>
      </tr>
      <tr class="border-b">
        <td class="py-1 px-2 font-mono">Space</td>
        <td class="py-1 px-2">Open action menu</td>
      </tr>
      <tr>
        <td class="py-1 px-2 font-mono">X</td>
        <td class="py-1 px-2">Close tab</td>
      </tr>
    </table>
    <button
      onclick="toggleModal()"
      class="mt-4 px-4 py-1 bg-blue-600 text-white rounded"
    >
      Close
    </button>
  </div>
</div>

<!-- JavaScript -->
<script>
  const mainContent = document.getElementById("main-content");
  const footerInfo = document.getElementById("footer-info");
  const tabsBar = document.getElementById("tabs-bar");
  const shortcutModal = document.getElementById("shortcut-modal");
  const actionMenu = document.getElementById("action-menu");
  const mobileMenu = document.getElementById("mobile-menu");

  let tabs = [];

  function setContent(type) {
    mainContent.innerHTML = `<h1 class="text-2xl font-bold">${type}</h1><p class="mt-2">This is the ${type.toLowerCase()} view.</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p><p>MMMMMM</p>`;
    footerInfo.textContent = `Currently viewing: ${type}`;
  }

  function openTab(type) {
    if (type === "Home") {
      tabsBar.classList.add("hidden");
      tabs = [];
      tabsBar.innerHTML = "";
      setContent("Home");
      return;
    }

    if (!tabs.includes(type)) {
      tabs.push(type);
      const tab = document.createElement("div");
      tab.className =
        "bg-gray-200 px-3 py-1 rounded flex items-center space-x-2";
      tab.innerHTML = `<span>${type}</span> <button class="text-red-500" onclick="event.stopPropagation(); closeTab('${type}')">X</button>`;
      tab.onclick = () => switchTab(type);
      tabsBar.appendChild(tab);
      tabsBar.classList.remove("hidden");
    }

    switchTab(type);
  }

  function switchTab(type) {
    setContent(type);
  }

  function closeTab(type) {
    tabs = tabs.filter((t) => t !== type);
    const tabDivs = tabsBar.querySelectorAll("div");
    tabDivs.forEach((div) => {
      if (div.textContent.includes(type)) {
        div.remove();
      }
    });

    if (tabs.length === 0) {
      openTab("Home");
    } else {
      switchTab(tabs[tabs.length - 1]);
    }
  }

  function toggleModal() {
    shortcutModal.classList.toggle("hidden");
  }

  function toggleActionMenu() {
    actionMenu.classList.toggle("hidden");
  }

  // Keyboard handlers
  document.addEventListener("keydown", (e) => {
    if (e.key === "?") {
      e.preventDefault();
      toggleModal();
    }
    if (e.key === " ") {
      e.preventDefault();
      toggleActionMenu();
    }
  });

  // Initial view
  openTab("Home");
</script>
<!doctype html>
<html lang="en" class="">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tailwind Semantic Colors (CDN)</title>

    <!-- Load Tailwind from CDN -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Tailwind config override -->
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              primary: "var(--color-primary)",
              background: "var(--color-background)",
              foreground: "var(--color-foreground)",
              selection: "var(--color-selection)",
            },
          },
        },
      };
    </script>

    <!-- Custom CSS variables (light + dark theme) -->
    <style>
      :root {
        --color-primary: #3b82f6; /* blue-500 */
        --color-background: #ffffff;
        --color-foreground: #1f2937; /* gray-800 */
        --color-selection: #93c5fd; /* blue-300 */
      }

      .dark {
        --color-primary: #2563eb; /* blue-600 */
        --color-background: #111827;
        --color-foreground: #f9fafb; /* gray-50 */
        --color-selection: #818cf8; /* indigo-300 */
      }

      ::selection {
        background-color: var(--color-selection);
        color: white;
      }
    </style>
  </head>
  <body
    class="bg-background text-foreground min-h-screen flex flex-col items-center justify-center gap-6 p-10"
  >
    <h1 class="text-4xl font-bold text-primary">Hello, Semantic Colors!</h1>

    <p class="text-lg">
      Try selecting this text â€” it uses a semantic <code>selection</code> color.
    </p>

    <button class="bg-primary text-white px-6 py-2 rounded hover:bg-opacity-90">
      Primary Button
    </button>

    <button
      onclick="document.documentElement.classList.toggle('dark')"
      class="mt-6 border px-4 py-1 rounded"
    >
      Toggle Dark Mode
    </button>
  </body>
</html>
<div class="container">
  <div id="highlight" class="highlight-layer" aria-hidden="true"></div>
  <div id="input" class="input-layer" contenteditable="true" spellcheck="false">
    This is a sample sentence. Here is another phrase with different words.
  </div>
</div>

<script>
  const input = document.getElementById("input");
  const highlight = document.getElementById("highlight");

  // Prevent typing or editing
  input.addEventListener("beforeinput", (e) => e.preventDefault());

  input.addEventListener("keyup", updateHighlight);
  input.addEventListener("mouseup", updateHighlight);

  function updateHighlight() {
    const text = input.innerText;
    const sel = window.getSelection();
    if (!sel.rangeCount) return;

    const range = sel.getRangeAt(0);
    const pos = getCursorIndex(range, input);
    if (pos == null) return;

    const { phraseStart, phraseEnd } = findPhrase(text, pos);
    const { wordStart, wordEnd } = findWord(
      text.slice(phraseStart, phraseEnd),
      pos - phraseStart,
    );

    const beforePhrase = escapeHTML(text.slice(0, phraseStart));
    const phraseText = text.slice(phraseStart, phraseEnd);
    const afterPhrase = escapeHTML(text.slice(phraseEnd));

    const beforeWord = escapeHTML(phraseText.slice(0, wordStart));
    const word = escapeHTML(phraseText.slice(wordStart, wordEnd));
    const afterWord = escapeHTML(phraseText.slice(wordEnd));

    highlight.innerHTML = `${beforePhrase}<span class="phrase">${beforeWord}<span class="word">${word}</span>${afterWord}</span>${afterPhrase}`;
  }

  function getCursorIndex(range, root) {
    let index = 0;
    const walker = document.createTreeWalker(
      root,
      NodeFilter.SHOW_TEXT,
      null,
      false,
    );
    while (walker.nextNode()) {
      const node = walker.currentNode;
      if (node === range.startContainer) {
        return index + range.startOffset;
      }
      index += node.textContent.length;
    }
    return null;
  }

  function findPhrase(text, index) {
    const sentenceEnd = /[.!?]/g;
    let start = 0,
      end = text.length;

    for (let match of text.matchAll(sentenceEnd)) {
      if (match.index < index) start = match.index + 1;
      if (match.index >= index) {
        end = match.index + 1;
        break;
      }
    }
    return { phraseStart: start, phraseEnd: end };
  }

  function findWord(text, index) {
    const isWordChar = (c) => /\w/.test(c);
    let start = index,
      end = index;

    while (start > 0 && isWordChar(text[start - 1])) start--;
    while (end < text.length && isWordChar(text[end])) end++;

    return { wordStart: start, wordEnd: end };
  }

  function escapeHTML(str) {
    return str.replace(
      /[&<>"']/g,
      (c) =>
        ({
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;",
        })[c],
    );
  }

  // Initialize
  updateHighlight();
</script>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>YAPLI</title>
<style>
  :root {
    --app-height: 100vh;
  }
  .safe-screen {
    min-height: var(--app-height);
  }
</style>
